---
# tasks file for kvm
# - name: Verificar OS
#   fail:  msg="This role is not supported in {{ansible_os_family}} OS"
#   when: ansible_os_family != "Debian"

- name: Obter o nome de todas a networks presentes
  virt_net:
    command: list_nets
  register: aux_virt_networks
  tags: never, add_ip

# Variável apenas com o conteúdo das networks (limpar o 'lixo' do ansible)
- name: Criar variavel com a lista das vms
  set_fact:
    virt_networks: "{{ aux_virt_networks.list_nets }}"
  tags: never, add_ip

# Obtem info sobre network; a info é formatada em xml, entao fica num var auxiliar
- name: Obter Informação sobre uma determinada network
  virt_net:
    name: "{{ host.network }}"
    command: get_xml
  register: aux_default_xml
  tags: never, add_ip

# Converte o xml em json
# xml_to_json é um plugin extra!! é necessário add a uma pasta com o nome (filter_plugins)
# link: https://github.com/nasgoncalves/ansible-xml-to-json-filter
- name: Converter xml para json
  set_fact:
    to_json_network: "{{ aux_default_xml.get_xml | xml_to_json }}"
  tags: never, add_ip

# Criar dicionario a partir do json; seria necessário(??) sem isto ñ consigo criar a lista em baixo...
# talvez mudar o nome da variavel...
- name: Criar dict a partir do json
  set_fact:
    network: "{{ to_json_network | dict2items }}"
  tags: never, add_ip

- set_fact:
    network_hosts: "{{ network.0.value.ip.dhcp.host }}"
  when: network.0.value.ip.dhcp.host is defined
  tags: never, add_ip

# Se não existirem hosts definidos na network, não vale a pena verificar se
# o novo host existe... então criei o bloco, e só é executado caso exista
# algum host definido
- block:
      - block:
            # Quando só existe 1 host
            # Verificar se algum dos campos do 'host' existem ( 1: existe, 0: ñ existe )
            - name: n hosts - Check if ip already exists
              set_fact:
                ip_exists: "{% for item in network_hosts if host.ip==item.ip %}{{ 1|e }}{% endfor %}"
              tags: never, add_ip

            - name: n hosts - Check if mac already exists
              set_fact:
                mac_exists: "{% for item in network_hosts if host.mac==item.mac %}{{ 1|e }}{% endfor %}"
              tags: never, add_ip

            - name: n hosts -  Check if name already exists
              set_fact:
                name_exists: "{% for item in network_hosts if host.name==item.name %}{{ 1|e }}{% endfor %}"
              tags: never, add_ip
        when: network_hosts.0 is defined

      - block:

              # Verificar se algum dos campos do 'host' existem ( 1: existe, 0: ñ existe )
              - name: 1 host - Check if ip already exists
                set_fact:
                  ip_exists: "{% if host.ip==network_hosts.ip %}{{ 1|e }}{% endif %}"
                tags: never, add_ip

              - name: 1 host - Check if mac already exists
                set_fact:
                  mac_exists: "{% if host.mac==network_hosts.mac %}{{ 1|e }}{% endif %}"
                tags: never, add_ip

              - name: 1 host - Check if name already exists
                set_fact:
                  name_exists: "{% if host.name==network_hosts.name %}{{ 1|e }}{% endif %}"
                tags: never, add_ip
        when: network_hosts is defined and network_hosts.0 is not defined

    # utilizo a shell porque com o ansible não era persistente (Verificar?)
    # quando existem hosts...
      - name: Adicionar novo host à network utilizando a shell
        shell: virsh net-update {{ host.network }} add ip-dhcp-host "<host mac='{{ host.mac }}' name='{{ host.name }}' ip='{{ host.ip }}' />" --live --config
        when: not ip_exists | bool and not mac_exists | bool and not name_exists | bool
        tags: never, add_ip

  # when: network.0.value.ip.dhcp.host is defined
  when: network_hosts is defined

# utilizo a shell porque com o ansible não era persistente (Verificar?)
# quando não existem hosts...
- name: Adicionar novo host à network utilizando a shell
  shell: virsh net-update {{ host.network }} add ip-dhcp-host "<host mac='{{ host.mac }}' name='{{ host.name }}' ip='{{ host.ip }}' />" --live --config
  when: network_hosts is not defined
  tags: never, add_ip

#virsh net-update alcafaz.test add ip-dhcp-host "<host mac='aa:bb:cc' name='test' ip='10.0.0.100' />" --live --config
