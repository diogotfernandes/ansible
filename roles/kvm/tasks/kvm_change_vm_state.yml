---
- name: Get vm status
  virt:
    command: status
    name: "{{ item.name }}"
  register: vm_current_state
  tags: always

# kvm_state => start, pause, unpause, shutdown

- name: Set state desired
  set_fact:
    kvm_state: start
  tags: never, start

- name: Set state desired
  set_fact:
    kvm_state: unpause
  tags: never, unpause

- name: Set state desired
  set_fact:
    kvm_state: pause
  tags: never, pause

- name: Set state desired
  set_fact:
    kvm_state: shutdown
  tags: never, shutdown

# status => running, shutdown, paused, destroyed
# running => paused or shutdown
# paused => unpause or shutdown
# shutdown => running

- name: Change vm state
  virt:
    command: "{{ kvm_state }}"
    name: "{{ item.name }}"
  changed_when: vm_current_state.status != kvm_state
  when: vm_current_state.status == ('running' if kvm_state == 'pause' else 'running' if kvm_state == 'shutdown' else 'shutdown' if kvm_state == 'start' else 'paused' if kvm_state == 'unpause')
  register: aux
  tags: never, start, shutdown, pause, unpause


# kvm_state => start, pause, unpause, shutdown
#
# - name: Change vm state
#   virt:
#     command: shutdown
#     name: mail.alcafaz.test
#   when: vm_current_state.status = 'running'
#
# - name: Change vm state
#   virt:
#     command: pause
#     name: mail.alcafaz.test
#   when: vm_current_state.status = 'running'
#
# - name: Change vm state
#   virt:
#     command: start
#     name: mail.alcafaz.test
#   when: vm_current_state.status = 'shutdown'
#
# - name: Change vm state
#   virt:
#     command: unpause
#     name: mail.alcafaz.test
#   when: vm_current_state.status = 'paused'


- name: Wait until vm change state
  virt:
    command: status
    name: "{{ item.name }}"
  register: vm_change_status
  when: vm_current_state.status == ('running' if kvm_state == 'pause' else 'running' if kvm_state == 'shutdown' else 'shutdown' if kvm_state == 'start' else 'paused' if kvm_state == 'unpause')
  until: vm_change_status.status == ('shutdown' if kvm_state == 'shutdown' else  'running' if kvm_state == 'start' else 'paused' if kvm_state == 'pause' else 'running' if kvm_state == 'unpause')
  retries: 6
  delay: 10
  tags: never, start, shutdown

- name: Get info about vms
  virt:
   command: info
  register: aux_info
  tags: always

# ok: [localhost] => (item={'key': 'debian10', 'value': {'state': 'shutdown', 'maxMem': '1048576', 'memory': '1048576', 'nrVirtCpu': 2, 'cpuTime': '0', 'autostart': 0}})

- name: Create list of vms
  set_fact:
    kvm_final_info: "{{ kvm_final_info|default([]) + [ { \
                  'name': info.key, \
                  'state': info.value.state, \
                  'maxMem': info.value.maxMem, \
                  'memory': info.value.memory, \
                  'nrVirtCpu': info.value.nrVirtCpu, \
                  'cpuTime': info.value.cpuTime, \
                  'autostart': info.value.autostart \
                  } ] }}"
  with_dict: "{{ aux_info }}"
  loop_control:
    loop_var: info
  when:
    - aux.key != 'changed'
    - aux.key != 'failed'
  tags: always

- name: kvm_final_info # do not change!
  debug:
    var: kvm_final_info
    verbosity: 1
  tags: always
